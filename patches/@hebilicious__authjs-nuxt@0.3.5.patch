diff --git a/dist/runtime/lib/server.d.ts b/dist/runtime/lib/server.d.ts
index 241b579ff53dd34dcc2f3a2fefd5fada59db2dc4..0b8721fb1a6c74a622a3286a67f802540047770d 100644
--- a/dist/runtime/lib/server.d.ts
+++ b/dist/runtime/lib/server.d.ts
@@ -8,7 +8,7 @@ import type { AuthConfig, Session } from "@auth/core/types";
  * @param runtimeConfig RuntimeConfig
  * @returns EventHandler
  */
-export declare function NuxtAuthHandler(options: AuthConfig, runtimeConfig: RuntimeConfig): import("h3").EventHandler<import("h3").EventHandlerRequest, Promise<Response | undefined>>;
+export declare function NuxtAuthHandler(options: AuthConfig|Function, runtimeConfig: RuntimeConfig): import("h3").EventHandler<import("h3").EventHandlerRequest, Promise<Response | undefined>>;
 /**
  * Get and returns the session.
  * @param event H3Event
diff --git a/dist/runtime/lib/server.mjs b/dist/runtime/lib/server.mjs
index f8faa46f411b00261f6907188a13253f2c7fc0c9..cc261bd989223356f69b4e52893400be9f64267c 100644
--- a/dist/runtime/lib/server.mjs
+++ b/dist/runtime/lib/server.mjs
@@ -14,6 +14,11 @@ if (!globalThis.crypto) {
 }
 export function NuxtAuthHandler(options, runtimeConfig) {
   return eventHandler(async (event) => {
+    // This will be fixed in https://github.com/Hebilicious/authjs-nuxt/pull/148
+    if (typeof options === 'function') {
+      options = await options(event)
+    }
+
     options.trustHost ??= true;
     options.skipCSRFCheck = skipCSRFCheck;
     const request = await getRequestFromEvent(event);
